<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s/func_loc/%s_%s_%s' % (expInfo['participant'], expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'sub-000', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="FunctionalLocalizer" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="setup_experiment">
      <RoutineSettingsComponent name="setup_experiment" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="setup_experiment" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="set_up" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import random&amp;#10;&amp;#10;#add counterbalance and match/mismatch keys&amp;#10;participant_id = expInfo['participant']&amp;#10;last_three_digits = int(participant_id[-3:])&amp;#10;&amp;#10;&amp;#10;if last_three_digits % 2 == 0:&amp;#10;    match_key = '1'&amp;#10;    mismatch_key = '2'&amp;#10;    instr_message = &quot;Vous verrez une image, puis un écran blanc, puis un mot. Appuyez sur '1' si le mot correspond à l’image, et sur '2' s’il ne correspond pas. Appuyez sur la barre d’espace pour commencer.&quot;&amp;#10;else : &amp;#10;    match_key = '2'&amp;#10;    mismatch_key = '1'&amp;#10;    instr_message = &quot;Vous verrez une image, puis un écran blanc, puis un mot. Appuyez sur '2' si le mot correspond à l’image, et sur '1' s’il ne correspond pas. Appuyez sur la barre d’espace pour commencer.&quot;&amp;#10;&amp;#10;&amp;#10;allowed_keys_list = [match_key, mismatch_key]&amp;#10;&amp;#10;# Store these for later use in routines&amp;#10;expInfo['match_key'] = match_key&amp;#10;expInfo['mismatch_key'] = mismatch_key&amp;#10;expInfo['allowed_keys_list'] = allowed_keys_list&amp;#10;&amp;#10;#open condition file to create list of match per trials&amp;#10;import pandas as pd&amp;#10;&amp;#10;condition_path = f&quot;output_localizers/localizer_conditions_{last_three_digits}.csv&quot;&amp;#10;&amp;#10;df_condition = pd.read_csv(condition_path)&amp;#10;&amp;#10;if last_three_digits % 2 == 0:&amp;#10;    df_condition['corrAns'] = df_condition['is_match'].map({'match': 1, 'mismatch': 2})&amp;#10;else:&amp;#10;    df_condition['corrAns'] = df_condition['is_match'].map({'match': 2, 'mismatch': 1})&amp;#10;&amp;#10;df_condition.to_csv(condition_path, index=False)&amp;#10;&amp;#10;#add trials counter for break &amp;#10;&amp;#10;trials_counter= 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;import * as pd from 'pandas';&amp;#10;participant_id = expInfo[&quot;participant&quot;];&amp;#10;last_three_digits = Number.parseInt(participant_id.slice((- 3)));&amp;#10;if (((last_three_digits % 2) === 0)) {&amp;#10;    match_key = &quot;1&quot;;&amp;#10;    mismatch_key = &quot;2&quot;;&amp;#10;    instr_message = &quot;Vous verrez une image, puis un \u00e9cran blanc, puis un mot. Appuyez sur '1' si le mot correspond \u00e0 l\u2019image, et sur '2' s\u2019il ne correspond pas. Appuyez sur la barre d\u2019espace pour commencer.&quot;;&amp;#10;} else {&amp;#10;    match_key = &quot;2&quot;;&amp;#10;    mismatch_key = &quot;1&quot;;&amp;#10;    instr_message = &quot;Vous verrez une image, puis un \u00e9cran blanc, puis un mot. Appuyez sur '2' si le mot correspond \u00e0 l\u2019image, et sur '1' s\u2019il ne correspond pas. Appuyez sur la barre d\u2019espace pour commencer.&quot;;&amp;#10;}&amp;#10;allowed_keys_list = [match_key, mismatch_key];&amp;#10;expInfo[&quot;match_key&quot;] = match_key;&amp;#10;expInfo[&quot;mismatch_key&quot;] = mismatch_key;&amp;#10;expInfo[&quot;allowed_keys_list&quot;] = allowed_keys_list;&amp;#10;condition_path = `output_localizers/localizer_conditions_${last_three_digits}.csv`;&amp;#10;df_condition = pd.read_csv(condition_path);&amp;#10;if (((last_three_digits % 2) === 0)) {&amp;#10;    df_condition[&quot;corrAns&quot;] = df_condition[&quot;is_match&quot;].map({&quot;match&quot;: 1, &quot;mismatch&quot;: 2});&amp;#10;} else {&amp;#10;    df_condition[&quot;corrAns&quot;] = df_condition[&quot;is_match&quot;].map({&quot;match&quot;: 2, &quot;mismatch&quot;: 1});&amp;#10;}&amp;#10;df_condition.to_csv(condition_path, {&quot;index&quot;: false});&amp;#10;trials_counter = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_up" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="instr_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instr_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$instr_message" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="instr_resp" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="instr_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="init_eeg" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;# EEG&amp;#10;import struct&amp;#10;import serial&amp;#10;import time&amp;#10;# Trigger box Plus COM port&amp;#10;adress = 'COM17'&amp;#10;def init_port(adress):&amp;#10;    port = serial.Serial(adress, baudrate=2000000)&amp;#10;    time.sleep(1) # Wait to make sure it's open&amp;#10;    return port&amp;#10;&amp;#10;def write_port(port, pin):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Turn on one of the ditigal pin&amp;#10;    pin: integer in range 2-13&amp;#10;    &quot;&quot;&quot;&amp;#10;    # Convert to string&amp;#10;    string = b'' + struct.pack('!B', pin)&amp;#10;    # Write&amp;#10;    port.write(string)&amp;#10;    &amp;#10;port = init_port(adress)&amp;#10;port.write([0x00])&amp;#10;&amp;#10;# Init EEG&amp;#10;from psychopy.hardware import brainproducts&amp;#10;rcs = brainproducts.RemoteControlServer(host='192.168.1.2',timeout=5)&amp;#10;&amp;#10;rcs.openRecorder()&amp;#10;time.sleep(2)&amp;#10;rcs.workspace = 'C:/Users/labmp-eeg/Desktop/antoine_cognitivemaps/antoine_cognitivemaps.rwksp'&amp;#10;rcs.participant = expInfo['participant'] + '_' + expInfo['date']&amp;#10;rcs.expName = 'cmapsfuncloc'&amp;#10;time.sleep(5)&amp;#10;rcs.mode = 'monitor' &amp;#10;time.sleep(2)&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="init_eeg" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_msg">
      <RoutineSettingsComponent name="block_msg" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="block_msg" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="block_msg_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="block_msg_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$f&quot;Début du bloc 1 sur 1. Appuyez sur la barre d’espace pour continuer.&quot;" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_block_msg" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_block_msg" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="inside_loop">
      <RoutineSettingsComponent name="inside_loop" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="inside_loop" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="feedback_routine">
      <RoutineSettingsComponent name="feedback_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="feedback_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="feedback_text_display" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_text_display" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$feedback_message" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="feedback_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((! show_feedback_flag)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#skip feedback if right answer&amp;#10;if not show_feedback_flag:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="feedback_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="iti_routine">
      <RoutineSettingsComponent name="iti_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="iti_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="iti_fixation" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="iti_fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$iti_duration" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="end">
      <RoutineSettingsComponent name="end" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="end" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="end_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="end_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val=" La première partie de l’expérience est terminée." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="fixation_2">
      <RoutineSettingsComponent name="fixation_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="fixation_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="trial_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="image_display_dur = 1.0;&amp;#10;word_display_duration = 1.0;&amp;#10;total_response_time_allowed = 2.0;&amp;#10;trials_counter = (trials_counter + 1);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="image_display_dur = 1.0&amp;#10;word_display_duration = 1.0&amp;#10;total_response_time_allowed = 2.0&amp;#10;&amp;#10;trials_counter = trials_counter + 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="trial_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="fixation" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="eeg_fix" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_sent = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_sent = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if fixation.status == STARTED and wait_sent == 0: #If the stimulus component has started and the trigger has not yet been sent. Change 'stimulus' to match the name of the component you want the trigger to be sent at the same time as&amp;#10;    win.callOnFlip(port.write, data=b'\x01') #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(eci_client.send_event, event_type = 'wait') #Send the trigger, synced to the screen refresh&amp;#10;    wait_sent = 1 #The wait has now been sent, so we set this to true to avoid a trigger being sent on each frame&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="port.write([0]);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="port.write([0x00])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="eeg_fix" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trials_image">
      <RoutineSettingsComponent name="trials_image" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trials_image" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="eeg_image" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_sent = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_sent = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if stim_image.status == STARTED and wait_sent == 0: #If the stimulus component has started and the trigger has not yet been sent. Change 'stimulus' to match the name of the component you want the trigger to be sent at the same time as&amp;#10;    win.callOnFlip(port.write, data=b'\x04') #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(eci_client.send_event, event_type = 'wait') #Send the trigger, synced to the screen refresh&amp;#10;    wait_sent = 1 #The wait has now been sent, so we set this to true to avoid a trigger being sent on each frame&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="port.write([0]);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="port.write([0x00])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="eeg_image" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="photo_sensor" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="photodiode_box = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;width&quot;: 50, &quot;height&quot;: 50, &quot;fillColor&quot;: &quot;white&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;pos&quot;: [(((- psychoJS.window.size[0]) / 2) + 25), (((- psychoJS.window.size[1]) / 2) + 25)], &quot;units&quot;: &quot;pix&quot;, &quot;autoDraw&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="photodiode_box = visual.Rect(&amp;#10;    win=win,&amp;#10;    width=50,&amp;#10;    height=50,&amp;#10;    fillColor='white',&amp;#10;    lineColor='white',&amp;#10;    pos=(-win.size[0]/2 + 25, -win.size[1]/2 + 25),&amp;#10;    units='pix',&amp;#10;    autoDraw=False&amp;#10;)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if stim_image.status == STARTED:&amp;#10;    photodiode_box.autoDraw = True&amp;#10;else:&amp;#10;    photodiode_box.autoDraw = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((stim_image.status === PsychoJS.Status.STARTED)) {&amp;#10;    photodiode_box.autoDraw = true;&amp;#10;} else {&amp;#10;    photodiode_box.autoDraw = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="photodiode_box.autoDraw = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="photodiode_box.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="photo_sensor" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="stim_image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$image_file" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stim_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$image_display_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
    </Routine>
    <Routine name="trials_word">
      <RoutineSettingsComponent name="trials_word" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trials_word" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="eeg_word" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_sent = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_sent = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if stim_word.status == STARTED and wait_sent == 0: #If the stimulus component has started and the trigger has not yet been sent. Change 'stimulus' to match the name of the component you want the trigger to be sent at the same time as&amp;#10;    win.callOnFlip(port.write, data=b'\x20') #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(eci_client.send_event, event_type = 'wait') #Send the trigger, synced to the screen refresh&amp;#10;    wait_sent = 1 #The wait has now been sent, so we set this to true to avoid a trigger being sent on each frame&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="port.write([0]);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="port.write([0x00])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="eeg_word" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="stim_word" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="stim_word" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=" 0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$word_display_duration" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$presented_word" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="trials_resp">
      <RoutineSettingsComponent name="trials_resp" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trials_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
    </Routine>
    <Routine name="blank">
      <RoutineSettingsComponent name="blank" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="blank" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;randomizer = Math.random.randint(0, 10);&amp;#10;time_of_blank = (1.0 + (randomizer / 10));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import random&amp;#10;randomizer = random.randint(0, 10)&amp;#10;&amp;#10;time_of_blank = 1.0 + (randomizer/10)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="blank_interval" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="blank_interval" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$time_of_blank" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="eeg_blank" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_sent = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_sent = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if blank_interval.status == STARTED and wait_sent == 0: #If the stimulus component has started and the trigger has not yet been sent. Change 'stimulus' to match the name of the component you want the trigger to be sent at the same time as&amp;#10;    win.callOnFlip(port.write, data=b'\x02') #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(eci_client.send_event, event_type = 'wait') #Send the trigger, synced to the screen refresh&amp;#10;    wait_sent = 1 #The wait has now been sent, so we set this to true to avoid a trigger being sent on each frame&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="port.write([0]);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="port.write([0x00])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="eeg_blank" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="response">
      <RoutineSettingsComponent name="response" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="$allowed_keys_list" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$corrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$total_response_time_allowed" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="timer" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="t = routineTimer.getTime()&amp;#10;if t &gt; key_resp.tStart + total_response_time_allowed and not key_resp.keys: &amp;#10;    key_resp.corr = 0&amp;#10;    thisExp.addData('timeout', 1)&amp;#10;    continueRoutine = False&amp;#10;  " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="t = routineTimer.getTime();&amp;#10;if (((t &gt; (key_resp.tStart + total_response_time_allowed)) &amp;&amp; (! key_resp.keys))) {&amp;#10;    key_resp.corr = 0;&amp;#10;    psychoJS.experiment.addData(&quot;timeout&quot;, 1);&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="timer" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="save_data" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;image_presented&quot;, image_file);&amp;#10;psychoJS.experiment.addData(&quot;word_presented&quot;, presented_word);&amp;#10;psychoJS.experiment.addData(&quot;is_match_condition&quot;, is_match);&amp;#10;if (key_resp.keys) {&amp;#10;    psychoJS.experiment.addData(&quot;response_given&quot;, key_resp.keys[0]);&amp;#10;    psychoJS.experiment.addData(&quot;response_correct&quot;, key_resp.corr);&amp;#10;    psychoJS.experiment.addData(&quot;response_rt&quot;, key_resp.rt);&amp;#10;} else {&amp;#10;    psychoJS.experiment.addData(&quot;response_given&quot;, null);&amp;#10;    psychoJS.experiment.addData(&quot;response_correct&quot;, 0);&amp;#10;    psychoJS.experiment.addData(&quot;response_rt&quot;, null);&amp;#10;}&amp;#10;feedback_message = &quot;&quot;;&amp;#10;show_feedback_flag = false;&amp;#10;if ((! key_resp.keys)) {&amp;#10;    feedback_message = &quot;D\u00e9lai de r\u00e9ponse d\u00e9pass\u00e9. Veuillez r\u00e9pondre rapidement.&quot;;&amp;#10;    show_feedback_flag = true;&amp;#10;} else {&amp;#10;    if ((! key_resp.corr)) {&amp;#10;        feedback_message = &quot;Mauvaise r\u00e9ponse&quot;;&amp;#10;        show_feedback_flag = true;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;feedback_message_to_show&quot;, feedback_message);&amp;#10;psychoJS.experiment.addData(&quot;show_feedback_flag_value&quot;, show_feedback_flag);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Store data&amp;#10;thisExp.addData('image_presented', image_file)&amp;#10;thisExp.addData('word_presented', presented_word)&amp;#10;thisExp.addData('is_match_condition', is_match) # from conditions file&amp;#10;&amp;#10;if key_resp.keys:&amp;#10;    thisExp.addData('response_given', key_resp.keys[0])&amp;#10;    thisExp.addData('response_correct', key_resp.corr)&amp;#10;    thisExp.addData('response_rt', key_resp.rt)&amp;#10;else: # Timeout&amp;#10;    thisExp.addData('response_given', None)&amp;#10;    thisExp.addData('response_correct', 0) # Mark as incorrect or a specific timeout code&amp;#10;    thisExp.addData('response_rt', None)&amp;#10;&amp;#10;# Determine feedback message&amp;#10;feedback_message = &quot;&quot;&amp;#10;show_feedback_flag = False&amp;#10;&amp;#10;if not key_resp.keys: # Timeout&amp;#10;    feedback_message = &quot;Délai de réponse dépassé. Veuillez répondre rapidement.&quot;&amp;#10;    show_feedback_flag = True&amp;#10;elif not key_resp.corr: # Incorrect response&amp;#10;    feedback_message = &quot;Mauvaise réponse&quot; &amp;#10;    show_feedback_flag = True&amp;#10;# else: correct response, no feedback_message, show_feedback_flag remains False&amp;#10;&amp;#10;# To be used in the feedback routine&amp;#10;thisExp.addData('feedback_message_to_show', feedback_message)&amp;#10;thisExp.addData('show_feedback_flag_value', show_feedback_flag)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="save_data" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$total_response_time_allowed" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$f&quot;Indiquer si le mot correspond à l'image précédente à l'aide de {allowed_keys_list}&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="eeg_resp" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="wait_sent = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="wait_sent = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if text.status == STARTED and wait_sent == 0: #If the stimulus component has started and the trigger has not yet been sent. Change 'stimulus' to match the name of the component you want the trigger to be sent at the same time as&amp;#10;    win.callOnFlip(port.write, data=b'\x08') #Send the trigger, synced to the screen refresh&amp;#10;    #win.callOnFlip(eci_client.send_event, event_type = 'wait') #Send the trigger, synced to the screen refresh&amp;#10;    wait_sent = 1 #The wait has now been sent, so we set this to true to avoid a trigger being sent on each frame&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="port.write([0]);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="port.write([0x00])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="eeg_resp" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="break_2">
      <RoutineSettingsComponent name="break_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="break_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="break_code" plugin="None">
        <Param val="import serial&amp;#10;timer = core.Clock()" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as serial from 'serial';&amp;#10;timer = new util.Clock();&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (_pj.in_es6(trials_counter, [74, 128, 222])) {&amp;#10;    continueRoutine = true;&amp;#10;} else {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;stimclock = new util.Clock();&amp;#10;starttime = stimclock.getTime();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if trials_counter in [74, 128, 222]:&amp;#10;    continueRoutine = True&amp;#10;else:&amp;#10;    continueRoutine = False&amp;#10;    &amp;#10;&amp;#10;stimclock = core.Clock()&amp;#10;starttime = stimclock.getTime()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="remaining = str(60 - round(stimclock.getTime()- starttime))&amp;#10;text_clock = '      Bloc Terminé, pause '   +  remaining  + ' sec        ' + '           Appuyer sur p lorsque vous serez prêt pour le prochain bloc.    '&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="remaining = (60 - util.round((stimclock.getTime() - starttime))).toString();&amp;#10;text_clock = (((&quot;      Bloc Termin\u00e9, pause &quot; + remaining) + &quot; sec        &quot;) + &quot;           Appuyer sur p lorsque vous serez pr\u00eat pour le prochain bloc.    &quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="break_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="timer_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="timer_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$text_clock" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="finish_time" plugin="None">
        <Param val="'p'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="finish_time" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="start_eeg">
      <RoutineSettingsComponent name="start_eeg" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="start_eeg" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Vérifier eeg&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="start_eeg_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="rec_start = core.monotonicClock.getTime();&amp;#10;rcs.startRecording();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="rec_start = core.monotonicClock.getTime()&amp;#10;rcs.startRecording()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="start_eeg_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setup_experiment"/>
    <Routine name="start_eeg"/>
    <LoopInitiator loopType="TrialHandler" name="inside_loop_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.78), ('iti_duration', 2.3), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.76), ('iti_duration', 2.21), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.38), ('iti_duration', 2.97), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.88), ('iti_duration', 2.4), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.08), ('iti_duration', 1.04), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.81), ('iti_duration', 1.38), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.54), ('iti_duration', 2.95), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.81), ('iti_duration', 2.37), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.67), ('iti_duration', 1.45), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.05), ('iti_duration', 1.11), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.01), ('iti_duration', 1.15), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.9), ('iti_duration', 1.98), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.33), ('iti_duration', 1.93), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.28), ('iti_duration', 1.88), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.1), ('iti_duration', 1.02), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.4), ('iti_duration', 1.12), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.75), ('iti_duration', 1.35), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.11), ('iti_duration', 1.13), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.27), ('iti_duration', 2.57), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.6), ('iti_duration', 2.9), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.4), ('iti_duration', 1.56), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.99), ('iti_duration', 1.61), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.98), ('iti_duration', 2.07), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.09), ('iti_duration', 2.44), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.23), ('iti_duration', 1.58), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.54), ('iti_duration', 2.56), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.58), ('iti_duration', 2.97), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.67), ('iti_duration', 1.67), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.45), ('iti_duration', 2.5), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.78), ('iti_duration', 1.44), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.08), ('iti_duration', 1.47), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.61), ('iti_duration', 2.54), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.38), ('iti_duration', 1.42), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.35), ('iti_duration', 2.02), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.57), ('iti_duration', 1.81), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.82), ('iti_duration', 2.96), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.81), ('iti_duration', 2.4), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.09), ('iti_duration', 1.5), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.46), ('iti_duration', 1.1), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.47), ('iti_duration', 1.4), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.5), ('iti_duration', 2.71), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.34), ('iti_duration', 1.31), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.15), ('iti_duration', 1.77), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.27), ('iti_duration', 1.26), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.87), ('iti_duration', 1.85), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.82), ('iti_duration', 2.74), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.02), ('iti_duration', 2.86), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.4), ('iti_duration', 1.68), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.65), ('iti_duration', 1.98), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.2), ('iti_duration', 1.62), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.04), ('iti_duration', 1.73), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.62), ('iti_duration', 2.33), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.51), ('iti_duration', 1.26), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.58), ('iti_duration', 1.3), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.17), ('iti_duration', 2.46), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.22), ('iti_duration', 2.32), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.8), ('iti_duration', 2.34), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.15), ('iti_duration', 2.62), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.17), ('iti_duration', 1.93), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.9), ('iti_duration', 1.42), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.26), ('iti_duration', 1.49), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.25), ('iti_duration', 2.85), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.51), ('iti_duration', 1.21), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.21), ('iti_duration', 2.57), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.01), ('iti_duration', 2.07), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.83), ('iti_duration', 1.61), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.61), ('iti_duration', 2.5), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.1), ('iti_duration', 1.86), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.55), ('iti_duration', 1.54), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.2), ('iti_duration', 1.86), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.03), ('iti_duration', 1.62), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.99), ('iti_duration', 2.28), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.38), ('iti_duration', 1.01), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.54), ('iti_duration', 2.49), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 2.0), ('iti_duration', 1.28), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.8), ('iti_duration', 2.73), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.64), ('iti_duration', 1.27), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.38), ('iti_duration', 2.1), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.24), ('iti_duration', 2.34), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.6), ('iti_duration', 1.94), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.28), ('iti_duration', 2.18), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.01), ('iti_duration', 2.24), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.72), ('iti_duration', 1.77), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.91), ('iti_duration', 1.59), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.75), ('iti_duration', 2.9), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.09), ('iti_duration', 1.19), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.95), ('iti_duration', 1.33), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.88), ('iti_duration', 1.52), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.42), ('iti_duration', 1.93), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.67), ('iti_duration', 2.13), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.97), ('iti_duration', 1.5), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.1), ('iti_duration', 1.56), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.88), ('iti_duration', 1.81), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.37), ('iti_duration', 2.01), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.61), ('iti_duration', 1.64), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.45), ('iti_duration', 1.5), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.42), ('iti_duration', 1.56), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.25), ('iti_duration', 2.82), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.67), ('iti_duration', 2.6), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.08), ('iti_duration', 1.37), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.3), ('iti_duration', 2.33), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.42), ('iti_duration', 1.13), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.89), ('iti_duration', 2.72), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.21), ('iti_duration', 1.69), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.86), ('iti_duration', 2.15), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.32), ('iti_duration', 2.08), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.12), ('iti_duration', 2.8), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.16), ('iti_duration', 2.92), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.03), ('iti_duration', 1.4), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.54), ('iti_duration', 2.47), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.49), ('iti_duration', 1.43), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.09), ('iti_duration', 1.44), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.11), ('iti_duration', 1.87), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.07), ('iti_duration', 2.55), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.15), ('iti_duration', 1.25), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.27), ('iti_duration', 2.87), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.38), ('iti_duration', 2.5), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.52), ('iti_duration', 1.1), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.41), ('iti_duration', 2.26), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.89), ('iti_duration', 1.49), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.21), ('iti_duration', 2.89), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.86), ('iti_duration', 1.5), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.85), ('iti_duration', 2.21), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.26), ('iti_duration', 2.78), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.88), ('iti_duration', 2.29), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.64), ('iti_duration', 1.05), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.33), ('iti_duration', 2.39), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.37), ('iti_duration', 1.42), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.94), ('iti_duration', 2.14), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.44), ('iti_duration', 2.35), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.56), ('iti_duration', 2.44), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.3), ('iti_duration', 1.72), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.6), ('iti_duration', 2.35), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.44), ('iti_duration', 2.41), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.86), ('iti_duration', 1.14), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.2), ('iti_duration', 1.75), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.56), ('iti_duration', 2.03), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.35), ('iti_duration', 1.86), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.46), ('iti_duration', 1.85), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.19), ('iti_duration', 1.43), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.98), ('iti_duration', 2.57), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.0), ('iti_duration', 2.44), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.77), ('iti_duration', 2.7), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.97), ('iti_duration', 2.85), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.63), ('iti_duration', 1.46), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.21), ('iti_duration', 1.26), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.96), ('iti_duration', 2.27), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.2), ('iti_duration', 2.43), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.35), ('iti_duration', 2.3), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.97), ('iti_duration', 2.16), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.9), ('iti_duration', 2.49), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.53), ('iti_duration', 2.34), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.6), ('iti_duration', 2.96), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.44), ('iti_duration', 2.04), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.92), ('iti_duration', 1.24), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.22), ('iti_duration', 2.4), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 2.0), ('iti_duration', 2.1), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.71), ('iti_duration', 1.13), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.82), ('iti_duration', 1.21), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.81), ('iti_duration', 1.01), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.24), ('iti_duration', 1.93), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.33), ('iti_duration', 1.06), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.47), ('iti_duration', 2.57), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.75), ('iti_duration', 2.54), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.92), ('iti_duration', 2.56), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.54), ('iti_duration', 2.5), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.44), ('iti_duration', 2.47), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.97), ('iti_duration', 2.72), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.9), ('iti_duration', 1.8), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.68), ('iti_duration', 2.69), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.15), ('iti_duration', 1.59), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.6), ('iti_duration', 1.24), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.22), ('iti_duration', 2.01), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.38), ('iti_duration', 1.08), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.68), ('iti_duration', 2.92), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.98), ('iti_duration', 1.2), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.7), ('iti_duration', 2.22), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.96), ('iti_duration', 1.67), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.04), ('iti_duration', 1.16), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.59), ('iti_duration', 1.01), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.96), ('iti_duration', 1.22), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.15), ('iti_duration', 1.32), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.92), ('iti_duration', 1.7), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.06), ('iti_duration', 2.17), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.56), ('iti_duration', 2.37), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.44), ('iti_duration', 2.72), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.65), ('iti_duration', 2.22), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.23), ('iti_duration', 2.44), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.73), ('iti_duration', 2.35), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.51), ('iti_duration', 2.33), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.54), ('iti_duration', 3.0), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.35), ('iti_duration', 1.52), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.3), ('iti_duration', 2.28), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.44), ('iti_duration', 1.06), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.22), ('iti_duration', 2.18), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.71), ('iti_duration', 1.47), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.94), ('iti_duration', 2.47), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.04), ('iti_duration', 1.67), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.64), ('iti_duration', 1.52), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.83), ('iti_duration', 1.5), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.81), ('iti_duration', 2.46), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.88), ('iti_duration', 2.76), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.16), ('iti_duration', 1.76), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.44), ('iti_duration', 2.97), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.68), ('iti_duration', 1.23), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.19), ('iti_duration', 1.09), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.63), ('iti_duration', 1.2), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.2), ('iti_duration', 1.04), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.64), ('iti_duration', 1.73), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.48), ('iti_duration', 1.87), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.65), ('iti_duration', 2.09), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.08), ('iti_duration', 2.38), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.74), ('iti_duration', 2.35), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.85), ('iti_duration', 1.36), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.61), ('iti_duration', 2.44), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.83), ('iti_duration', 2.41), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.59), ('iti_duration', 1.64), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.59), ('iti_duration', 2.33), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.3), ('iti_duration', 1.78), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.42), ('iti_duration', 1.06), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.12), ('iti_duration', 2.8), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.96), ('iti_duration', 2.47), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.58), ('iti_duration', 2.05), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.04), ('iti_duration', 2.19), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.83), ('iti_duration', 1.17), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.9), ('iti_duration', 2.09), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.09), ('iti_duration', 1.85), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.47), ('iti_duration', 1.88), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.07), ('iti_duration', 2.26), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.28), ('iti_duration', 2.56), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.85), ('iti_duration', 1.33), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.15), ('iti_duration', 1.09), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.55), ('iti_duration', 1.1), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.31), ('iti_duration', 2.31), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.83), ('iti_duration', 2.24), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.3), ('iti_duration', 1.63), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.89), ('iti_duration', 1.17), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.34), ('iti_duration', 2.7), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.84), ('iti_duration', 2.55), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.7), ('iti_duration', 1.09), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.63), ('iti_duration', 1.67), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.63), ('iti_duration', 1.53), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.95), ('iti_duration', 1.04), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.86), ('iti_duration', 2.95), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.7), ('iti_duration', 1.25), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.55), ('iti_duration', 1.38), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.27), ('iti_duration', 2.57), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.19), ('iti_duration', 1.9), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.24), ('iti_duration', 2.31), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.95), ('iti_duration', 1.17), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.32), ('iti_duration', 1.54), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.47), ('iti_duration', 2.06), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.24), ('iti_duration', 1.24), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.97), ('iti_duration', 1.54), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.11), ('iti_duration', 2.64), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.34), ('iti_duration', 2.18), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.21), ('iti_duration', 1.84), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 2.0), ('iti_duration', 2.67), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.51), ('iti_duration', 2.59), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.28), ('iti_duration', 1.45), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.33), ('iti_duration', 2.52), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.81), ('iti_duration', 2.08), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.75), ('iti_duration', 2.85), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.63), ('iti_duration', 1.55), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.93), ('iti_duration', 2.51), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.77), ('iti_duration', 1.34), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'face'), ('is_match', 'match'), ('blank_duration', 1.23), ('iti_duration', 1.06), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.09), ('iti_duration', 1.09), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.43), ('iti_duration', 2.81), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.12), ('iti_duration', 2.07), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.65), ('iti_duration', 1.88), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.23), ('iti_duration', 2.05), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.66), ('iti_duration', 1.57), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.88), ('iti_duration', 1.05), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.92), ('iti_duration', 2.2), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'face'), ('is_match', 'mismatch'), ('blank_duration', 1.67), ('iti_duration', 1.71), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.24), ('iti_duration', 1.48), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'banana'), ('is_match', 'mismatch'), ('blank_duration', 1.24), ('iti_duration', 2.33), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.77), ('iti_duration', 1.26), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 2.0), ('iti_duration', 1.15), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/zebra.png'), ('presented_word', 'zebra'), ('is_match', 'match'), ('blank_duration', 1.96), ('iti_duration', 2.99), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.66), ('iti_duration', 1.76), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.7), ('iti_duration', 1.54), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.35), ('iti_duration', 2.57), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'zebra'), ('is_match', 'mismatch'), ('blank_duration', 1.56), ('iti_duration', 1.48), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/face.png'), ('presented_word', 'scissor'), ('is_match', 'mismatch'), ('blank_duration', 1.26), ('iti_duration', 2.0), ('corrAns', 2)]), OrderedDict([('image_file', 'stimuli/scissor.png'), ('presented_word', 'scissor'), ('is_match', 'match'), ('blank_duration', 1.4), ('iti_duration', 2.43), ('corrAns', 1)]), OrderedDict([('image_file', 'stimuli/banana.png'), ('presented_word', 'banana'), ('is_match', 'match'), ('blank_duration', 1.95), ('iti_duration', 2.84), ('corrAns', 1)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$condition_path" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="inside_loop_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="fixation_2"/>
    <Routine name="trials_image"/>
    <Routine name="trials_word"/>
    <Routine name="blank"/>
    <Routine name="response"/>
    <Routine name="feedback_routine"/>
    <Routine name="iti_routine"/>
    <Routine name="break_2"/>
    <LoopTerminator name="inside_loop_trials"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
